// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:

    /*
    	if (address[14] === 0) 
    		//accessing data
		else if (address[13] === 0)
			//accessing screen
		else
			//accessing keyboard
	*/


    //Note b=out is not valid here
    Mux16(a=internalOut, b=in, sel=load, out=valueToLoad);

    Not(in=address[14], out=accessingData);
    
    Not(in=address[13], out=notKeyboard);
	And(a=address[14], b=notKeyboard, out=accessingScreen);

	And(a=address[14], b=address[13], out=accessingKeyboard);


	And(a=accessingData, b=load, out=loadingData);
	And(a=accessingScreen, b=load, out=loadingScreen);


	//Data memory
    RAM16K(in=valueToLoad, load=loadingData, address=address[0..13], out=dataOut);

    //Screen Memory
    Screen(in=valueToLoad, load=loadingScreen, address=address[0..12], out=screenOut);

    //Keyboard
    Keyboard(out=keyboardOut);


	Not(in=address[0], out=notAddrZero);
	Not(in=notAddrZero, out=addrZero);

    //Output 
    /*
    	00 = data
    	01 = data
    	10 = screen
    	11 = keyboard
    */
    Mux4Way16(a=dataOut, b=dataOut, c=screenOut, d=keyboardOut, sel[0]=address[13], sel[1]=address[14], out=out, out=internalOut);



}