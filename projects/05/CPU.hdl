// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15], out=aInstruction);
    Not(in=aInstruction, out=cInstruction);

    // A Register
    // Should load if an A instruction or a C instruction and position d1 is set
    And(a=cInstruction, b=instruction[5], out=cInstructionShouldSetA);
    Or(a=aInstruction, b=cInstructionShouldSetA, out=shouldLoadA);

    // Value to load is either instruction (if A instruction) or ALU output (if C instruction);
    Mux16(a=instruction, b=alu, sel=cInstruction, out=aRegisterInput);

    ARegister(in=aRegisterInput, load=shouldLoadA, out=A, out[0..14]=addressM);
    
    // D Register
    And(a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in=alu, load=loadD, out=D);

    // writeM output.  
    // only want to write if its a C instruction and d3 is set
    And(a=instruction[15], b=instruction[3], out=writeM);

    // X is always D.  Y switches between A and M depending on the instruction 'a' bit
    Mux16(a=A, b=inM, sel=instruction[12], out=Y);

    ALU(
        x=D, 
        y=Y, 
        zx=instruction[11], 
        nx=instruction[10], 
        zy=instruction[9], 
        ny=instruction[8], 
        f=instruction[7], 
        no=instruction[6],
        ng=ng,
        zr=zr,
        out=alu,
        out=outM //there is a separate Mux to determine if this is actually written
    );

    // Determine whether we should jump
    Nor(a=ng, b=zr, out=ngNorZr);
    And(a=instruction[2], b=ng, out=lt);
    And(a=instruction[1], b=zr, out=eq);
    And(a=instruction[0], b=ngNorZr, out=gt);
    Or(a=lt, b=eq, out=lte);
    Or(a=lte, b=gt, out=shouldMaybeJump);

    And(a=shouldMaybeJump, b=cInstruction, out=shouldJump);
    Nor(a=shouldJump, b=reset, out=shouldInc);

    PC(in=A, inc=shouldInc, load=shouldJump, reset=reset, out[0..14]=pc);
}